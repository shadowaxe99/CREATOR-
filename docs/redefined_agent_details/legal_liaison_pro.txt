```python
# Import necessary libraries
from typing import Dict, Any
from web3 import Web3
from web3.contract import Contract

# Define the LegalLiaisonPro class
class LegalLiaisonPro:
    def __init__(self, contract: Contract, web3_instance: Web3):
        self.contract = contract
        self.web3 = web3_instance

    def get_legal_guidance(self, user_id: str, query: str) -> Dict[str, Any]:
        """
        Provides comprehensive legal guidance for creators on intellectual property and copyright issues.
        :param user_id: The unique identifier of the user requesting legal guidance.
        :param query: The legal question or topic the user needs guidance on.
        :return: A dictionary containing the legal advice and references.
        """
        # Simulate complex AI-driven legal analysis (placeholder for actual AI implementation)
        legal_advice = self._analyze_query(query)
        return {
            "user_id": user_id,
            "query": query,
            "advice": legal_advice,
            "references": self._get_legal_references(legal_advice)
        }

    def _analyze_query(self, query: str) -> str:
        """
        Analyzes the user's legal query using AI algorithms.
        :param query: The legal question or topic provided by the user.
        :return: A string containing the AI-generated legal advice.
        """
        # Placeholder for AI model prediction
        # In production, this would involve processing the query through a trained AI model
        return "Based on the provided information, here is the AI-generated legal advice."

    def _get_legal_references(self, legal_advice: str) -> Dict[str, str]:
        """
        Retrieves legal references and resources related to the provided legal advice.
        :param legal_advice: The AI-generated legal advice.
        :return: A dictionary of legal references and resources.
        """
        # Placeholder for retrieving relevant legal references
        # In production, this would involve querying a database or API for legal documents
        return {
            "copyright_law": "https://www.copyright.gov/",
            "intellectual_property_rights": "https://www.wipo.int/portal/en/index.html"
        }

    def log_query(self, user_id: str, query: str):
        """
        Logs the legal query to the blockchain for transparency and record-keeping.
        :param user_id: The unique identifier of the user.
        :param query: The legal question or topic provided by the user.
        """
        tx_hash = self.contract.functions.logLegalQuery(
            self.web3.toBytes(text=user_id),
            self.web3.toBytes(text=query)
        ).transact({'from': self.web3.eth.defaultAccount})
        receipt = self.web3.eth.waitForTransactionReceipt(tx_hash)
        return receipt

# Example usage
if __name__ == "__main__":
    # Connect to the Arbitrum blockchain
    web3_instance = Web3(Web3.HTTPProvider('https://arbitrum.io/rpc'))

    # Load the smart contract
    contract_address = web3_instance.toChecksumAddress('0xContractAddress')
    contract_abi = []  # Replace with actual contract ABI
    legal_contract = web3_instance.eth.contract(address=contract_address, abi=contract_abi)

    # Create an instance of the LegalLiaisonPro agent
    legal_liaison_pro = LegalLiaisonPro(contract=legal_contract, web3_instance=web3_instance)

    # Get legal guidance for a user
    user_guidance = legal_liaison_pro.get_legal_guidance(user_id='user123', query='Copyright infringement question')
    print(user_guidance)

    # Log the query on the blockchain
    receipt = legal_liaison_pro.log_query(user_id='user123', query='Copyright infringement question')
    print(receipt)
```
This code defines a `LegalLiaisonPro` class that simulates providing legal guidance to users. It includes methods for analyzing legal queries, retrieving legal references, and logging queries to the blockchain. The example usage demonstrates how to instantiate the class and use its methods. The actual AI model and blockchain interactions would be implemented in a production environment.