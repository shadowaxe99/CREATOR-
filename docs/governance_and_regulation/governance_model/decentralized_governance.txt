```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/governance/Governor.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ElysiumGovernance is Governor, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction {
    IERC20 public elysiumToken;

    constructor(IERC20 _elysiumToken, IVotes _token)
        Governor("ElysiumGovernance")
        GovernorVotes(_token)
        GovernorVotesQuorumFraction(4) // 25% quorum
    {
        elysiumToken = _elysiumToken;
    }

    // The following functions are overrides required by Solidity.

    function votingDelay() public pure override returns (uint256) {
        return 1; // 1 block
    }

    function votingPeriod() public pure override returns (uint256) {
        return 45818; // 1 week
    }

    function quorum(uint256 blockNumber) public view override returns (uint256) {
        return totalSupply(blockNumber) / 4; // 25% of the total supply
    }

    function totalSupply(uint256 blockNumber) public view returns (uint256) {
        return elysiumToken.getPastTotalSupply(blockNumber);
    }

    function getVotes(address account, uint256 blockNumber) public view override returns (uint256) {
        return elysiumToken.getPastVotes(account, blockNumber);
    }

    function propose(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        string memory description
    ) public override(Governor, IGovernor) returns (uint256) {
        return super.propose(targets, values, calldatas, description);
    }

    function _execute(
        uint256 proposalId,
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) internal override(Governor, GovernorTimelockControl) {
        super._execute(proposalId, targets, values, calldatas, descriptionHash);
    }

    function _cancel(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        uint256 proposalThreshold
    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {
        return super._cancel(targets, values, calldatas, proposalThreshold);
    }

    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {
        return super._executor();
    }

    function supportsInterface(bytes4 interfaceId) public view override(Governor, IERC165) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}
```