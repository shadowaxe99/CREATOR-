```python
import requests
from bs4 import BeautifulSoup
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.decomposition import LatentDirichletAllocation

class FashionForecaster:
    def __init__(self, trends_source_url):
        self.trends_source_url = trends_source_url
        self.trend_data = None
        self.model = None
        self.feature_names = None

    def fetch_trend_data(self):
        response = requests.get(self.trends_source_url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            articles = soup.find_all('article')
            self.trend_data = [article.get_text() for article in articles]
        else:
            raise ConnectionError(f"Failed to fetch data, status code: {response.status_code}")

    def preprocess_data(self):
        vectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')
        trend_matrix = vectorizer.fit_transform(self.trend_data)
        self.feature_names = vectorizer.get_feature_names_out()
        return trend_matrix

    def train_model(self, trend_matrix, n_topics=5, max_iter=10):
        lda = LatentDirichletAllocation(n_components=n_topics, max_iter=max_iter, learning_method='online', random_state=0)
        self.model = lda.fit(trend_matrix)

    def display_topics(self, n_top_words=10):
        topics = {}
        for topic_idx, topic in enumerate(self.model.components_):
            topics[f"Topic {topic_idx}"] = [self.feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]
        return topics

    def predict_trends(self, new_data):
        vectorizer = CountVectorizer(vocabulary=self.feature_names)
        new_data_vectorized = vectorizer.transform([new_data])
        topic_distribution = self.model.transform(new_data_vectorized)
        return topic_distribution

# Usage
trends_source_url = 'https://www.fashiontrends.com'
fashion_forecaster = FashionForecaster(trends_source_url)
fashion_forecaster.fetch_trend_data()
trend_matrix = fashion_forecaster.preprocess_data()
fashion_forecaster.train_model(trend_matrix)
topics = fashion_forecaster.display_topics()
print(topics)

# Predicting trends for new data
new_data = "Sustainable materials are becoming more popular in the fashion industry."
prediction = fashion_forecaster.predict_trends(new_data)
print(prediction)
```

This code defines a `FashionForecaster` class that fetches fashion trend data from a specified URL, processes the text data, trains a topic modeling algorithm (Latent Dirichlet Allocation), and predicts the distribution of topics for new data. It uses the `requests` library to fetch data, `BeautifulSoup` for HTML parsing, `pandas` for data manipulation, and `sklearn` for text vectorization and topic modeling.