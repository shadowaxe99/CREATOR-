```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract RewardsPool is Ownable, ReentrancyGuard {
    IERC20 public elysiumToken;
    uint256 public totalRewards;
    uint256 public remainingRewards;
    mapping(address => uint256) public rewards;

    event RewardsAdded(uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);

    constructor(address _elysiumTokenAddress) {
        require(_elysiumTokenAddress != address(0), "Elysium Token address cannot be zero");
        elysiumToken = IERC20(_elysiumTokenAddress);
    }

    function addRewards(uint256 _amount) external onlyOwner {
        require(_amount > 0, "Amount must be greater than zero");
        require(elysiumToken.transferFrom(msg.sender, address(this), _amount), "Transfer failed");

        totalRewards += _amount;
        remainingRewards += _amount;
        emit RewardsAdded(_amount);
    }

    function allocateReward(address _user, uint256 _amount) external onlyOwner {
        require(_amount > 0 && _amount <= remainingRewards, "Invalid reward amount");
        require(_user != address(0), "User address cannot be zero");

        rewards[_user] += _amount;
        remainingRewards -= _amount;
    }

    function claimReward() external nonReentrant {
        uint256 reward = rewards[msg.sender];
        require(reward > 0, "No rewards to claim");
        require(elysiumToken.transfer(msg.sender, reward), "Transfer failed");

        rewards[msg.sender] = 0;
        emit RewardClaimed(msg.sender, reward);
    }

    function getRewardBalance(address _user) external view returns (uint256) {
        return rewards[_user];
    }
}
```