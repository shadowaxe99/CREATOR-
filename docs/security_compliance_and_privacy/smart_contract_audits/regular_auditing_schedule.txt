```python
import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from smart_contract_audit import perform_audit

def schedule_regular_audits(audit_interval_days=30):
    """
    Schedules regular smart contract audits at a specified interval.

    :param audit_interval_days: The number of days between each audit.
    """
    scheduler = BackgroundScheduler()
    scheduler.add_job(
        perform_audit,
        'interval',
        days=audit_interval_days,
        next_run_time=datetime.datetime.now()
    )
    scheduler.start()

def perform_audit():
    """
    Function to perform the smart contract audit.
    This should be implemented to initiate an audit with a third-party security firm.
    """
    # Placeholder for actual audit implementation
    # This should include methods to:
    # - Select the smart contract(s) to be audited
    # - Send the smart contract(s) to the security firm
    # - Receive and process the audit report
    # - Store the audit report in a secure and accessible manner
    # - Notify stakeholders of the audit results
    print("Audit performed on:", datetime.datetime.now().isoformat())

# Example usage:
if __name__ == "__main__":
    # Schedule audits to occur every 30 days
    schedule_regular_audits(audit_interval_days=30)
```